#! /usr/bin/env python
# Zeobuilder is an extensible GUI-toolkit for molecular model construction.
# Copyright (C) 2007 Toon Verstraelen <Toon.Verstraelen@UGent.be>
#
# This file is part of Zeobuilder.
#
# Zeobuilder is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# Zeobuilder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --

import pygtk, sys, os, optparse
pygtk.require('2.0')


class InitFnConvert:
    def __init__(self, input_filename, output_filename, bonds=False):
        self.input_filename = input_filename
        self.output_filename = output_filename
        self.bonds = bonds

    def __call__(self):
        from zeobuilder import context
        from zeobuilder.models import FilenameError
        from zeobuilder.filters import FilterError
        import gtk
        try:
            context.application.model.file_open(self.input_filename)
            context.application.main.select_nodes([context.application.model.universe])
            if self.bonds:
                AutoConnectPhysical = context.application.plugins.get_action("AutoConnectPhysical")
                assert AutoConnectPhysical.analyze_selection()
                AutoConnectPhysical()
            context.application.model.file_save(self.output_filename)
            gtk.main_quit()
        except (FilenameError, FilterError), e:
            print str(e)
            gtk.main_quit()
            sys.exit(2)


usage = """Usage: %prog [options] input output
%prog converts the molecular model in the input file to the format of the
output file.

%prog -h prints out all available options."""

parser = optparse.OptionParser(usage)
parser.add_option(
    "-b", "--add-bonds",
    help="Add bonds to the model, based on a database of bond lengths and vdw"
         " radii. [default=%default]",
    default=False, action="store_true",
)
(options, args) = parser.parse_args()

if len(args) == 2:
    input_filename, output_filename = args
else:
    parser.error("Expecting two arguments.")
if not os.path.isfile(input_filename):
    parser.error("The input file %s does not exist." % input_filename)

init_fn = InitFnConvert(input_filename, output_filename, options.add_bonds)
from zeobuilder.application import Application
Application(init_fn)





