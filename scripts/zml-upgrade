#!/usr/bin/env python
# Zeobuilder is an extensible GUI-toolkit for molecular model construction.
# Copyright (C) 2007 - 2010 Toon Verstraelen <Toon.Verstraelen@UGent.be>, Center
# for Molecular Modeling (CMM), Ghent University, Ghent, Belgium; all rights
# reserved unless otherwise stated.
#
# This file is part of Zeobuilder.
#
# Zeobuilder is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# In addition to the regulations of the GNU General Public License,
# publications and communications based in parts on this program or on
# parts of this program are required to cite the following article:
#
# "ZEOBUILDER: a GUI toolkit for the construction of complex molecules on the
# nanoscale with building blocks", Toon Verstraelen, Veronique Van Speybroeck
# and Michel Waroquier, Journal of Chemical Information and Modeling, Vol. 48
# (7), 1530-1541, 2008
# DOI:10.1021/ci8000748
#
# Zeobuilder is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>
#
# --

import optparse, sys, xml.dom.minidom

usage="""Usage: zb-convert old.zml

Converts an old zml file to the latest zml format."""

parser = optparse.OptionParser(usage)
(options, args) = parser.parse_args()


if len(args) == 1:
    filename, = args
else:
    parser.error("Expecting one file name.")


def load_dom():
    return xml.dom.minidom.parse(filename)

def save_dom(dom):
    f = file(filename, "w")
    dom.writexml(f)
    f.close()

def get_version(dom):
    if dom.documentElement.tagName != "zml_file":
        raise FileFormatError("The given file is not a zml file.")
    return dom.documentElement.getAttribute("version")

def get_child(node, tag, attrs={}):
    for child in node.childNodes:
        if child.nodeType == child.ELEMENT_NODE and child.tagName == tag:
            match = True
            for key, val in attrs.iteritems():
                if child.getAttribute(key) != val:
                    match = False
                    break
            if match:
                return child
    raise KeyError("Could not find child element with tag '%s' and attributes %s" % (tag, attrs))

def convert1(dom):
    l = get_child(dom.documentElement, "list")
    universe = get_child(l, "model_object", {"class": "Universe"})
    try:
        active = get_child(universe, "array", {"label": "cell_active"})
        universe.removeChild(active)
    except KeyError:
        active = dom.createElement("array")
        active_shape = dom.createElement("shape")
        active_shape.appendChild(dom.createTextNode("3"))
        active.appendChild(active_shape)
        active_cells = dom.createElement("cells")
        active_cells.appendChild(dom.createTextNode("False False False"))
        active.appendChild(active_cells)
        print "Warning: no cell_active found"
    active.setAttribute("label", "active")

    try:
        matrix = get_child(universe, "array", {"label": "cell"})
        universe.removeChild(matrix)
    except KeyError:
        matrix = dom.createElement("matrix")
        matrix_shape = dom.createElement("shape")
        matrix_shape.appendChild(dom.createTextNode("3 3"))
        matrix.appendChild(matrix_shape)
        matrix_cells = dom.createElement("cells")
        matrix_cells.appendChild(dom.createTextNode("10.0 0.0 0.0 0.0 10.0 0.0 0.0 0.0 10.0"))
        matrix.appendChild(matrix_cells)
        print "Warning: no cell found"
    matrix.setAttribute("label", "matrix")

    unit_cell = dom.createElement("unit_cell")
    unit_cell.setAttribute("label", "cell")
    unit_cell.appendChild(matrix)
    unit_cell.appendChild(active)
    universe.appendChild(unit_cell)
    dom.documentElement.setAttribute("version", "0.2")

convertors = {
    '0.1': convert1,
}

if __name__ == "__main__":
    dom = load_dom()
    while True:
        version = get_version(dom)
        convertor = convertors.get(version)
        if convertor is None:
            break
        convertor(dom)
    save_dom(dom)


